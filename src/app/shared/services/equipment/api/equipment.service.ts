/**
 * Leonard Controllable Services
 * This is a server for use with Leonard Controllable Services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt@leonardgarden.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Equipment } from '../model/equipment';
import { EquipmentHistory } from '../model/equipmentHistory';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EquipmentService {

    protected basePath = '/equipmentService-0.0.1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Deletes an equipment object
     *
     * @param equipmentId Id of the equipment object to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentEquipmentIdDelete(equipmentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public equipmentEquipmentIdDelete(equipmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public equipmentEquipmentIdDelete(equipmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public equipmentEquipmentIdDelete(equipmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentId === null || equipmentId === undefined) {
            throw new Error('Required parameter equipmentId was null or undefined when calling equipmentEquipmentIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/equipment/${encodeURIComponent(String(equipmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns information about a specified equipment object
     *
     * @param equipmentId Id of the equipment object to get information from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentEquipmentIdGet(equipmentId: number, observe?: 'body', reportProgress?: boolean): Observable<Equipment>;
    public equipmentEquipmentIdGet(equipmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Equipment>>;
    public equipmentEquipmentIdGet(equipmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Equipment>>;
    public equipmentEquipmentIdGet(equipmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentId === null || equipmentId === undefined) {
            throw new Error('Required parameter equipmentId was null or undefined when calling equipmentEquipmentIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Equipment>(`${this.basePath}/equipment/${encodeURIComponent(String(equipmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the equipment object history data for a given time period
     *
     * @param equipmentId Id of the equipment object to get history from
     * @param startDate The start datetime for the history range
     * @param endDate the end datetime for the history range
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentEquipmentIdHistoryGet(equipmentId: number, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean): Observable<EquipmentHistory>;
    public equipmentEquipmentIdHistoryGet(equipmentId: number, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EquipmentHistory>>;
    public equipmentEquipmentIdHistoryGet(equipmentId: number, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EquipmentHistory>>;
    public equipmentEquipmentIdHistoryGet(equipmentId: number, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentId === null || equipmentId === undefined) {
            throw new Error('Required parameter equipmentId was null or undefined when calling equipmentEquipmentIdHistoryGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<EquipmentHistory>(`${this.basePath}/equipment/${encodeURIComponent(String(equipmentId))}/history/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * posts an action to equipment
     *
     * @param equipmentId Id of the equipment object to get information from
     * @param action Id of the equipment object to get information from
     * @param value parameters to pass to action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentEquipmentIdPost(equipmentId: number, action: string, value: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public equipmentEquipmentIdPost(equipmentId: number, action: string, value: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public equipmentEquipmentIdPost(equipmentId: number, action: string, value: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public equipmentEquipmentIdPost(equipmentId: number, action: string, value: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentId === null || equipmentId === undefined) {
            throw new Error('Required parameter equipmentId was null or undefined when calling equipmentEquipmentIdPost.');
        }
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling equipmentEquipmentIdPost.');
        }
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling equipmentEquipmentIdPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined) {
            queryParameters = queryParameters.set('action', <any>action);
        }
        if (value !== undefined) {
            queryParameters = queryParameters.set('value', <any>value);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/equipment/${encodeURIComponent(String(equipmentId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the equipment object
     *
     * @param equipmentId Id of the equipment object to update
     * @param equipmentData JSON data representing an equipment object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentEquipmentIdPut(equipmentId: number, equipmentData: Equipment, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public equipmentEquipmentIdPut(equipmentId: number, equipmentData: Equipment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public equipmentEquipmentIdPut(equipmentId: number, equipmentData: Equipment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public equipmentEquipmentIdPut(equipmentId: number, equipmentData: Equipment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentId === null || equipmentId === undefined) {
            throw new Error('Required parameter equipmentId was null or undefined when calling equipmentEquipmentIdPut.');
        }
        if (equipmentData === null || equipmentData === undefined) {
            throw new Error('Required parameter equipmentData was null or undefined when calling equipmentEquipmentIdPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/equipment/${encodeURIComponent(String(equipmentId))}`,
            equipmentData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets equipment
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public equipmentGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public equipmentGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public equipmentGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/equipment`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new equipment object
     *
     * @param equipmentData JSON data representing an equipment object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentPost(equipmentData: Equipment, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public equipmentPost(equipmentData: Equipment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public equipmentPost(equipmentData: Equipment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public equipmentPost(equipmentData: Equipment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (equipmentData === null || equipmentData === undefined) {
            throw new Error('Required parameter equipmentData was null or undefined when calling equipmentPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/equipment`,
            equipmentData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
